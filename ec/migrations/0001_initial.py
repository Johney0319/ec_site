# Generated by Django 3.1.5 on 2021-03-03 06:05

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cart_id', models.CharField(blank=True, max_length=250)),
                ('date_added', models.DateField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Jackets',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jacket_id', models.CharField(max_length=10)),
                ('jacket_name', models.CharField(max_length=20)),
                ('jacket_price', models.CharField(max_length=10)),
                ('jacket_size', models.CharField(max_length=2)),
                ('jacket_sex', models.CharField(max_length=5)),
                ('jacket_bland', models.CharField(max_length=30)),
                ('jacket_stock', models.CharField(max_length=3)),
                ('jacket_image', models.ImageField(upload_to='images/')),
            ],
        ),
        migrations.CreateModel(
            name='Pants',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pant_id', models.CharField(max_length=10)),
                ('pant_name', models.CharField(max_length=20)),
                ('pant_price', models.CharField(max_length=10)),
                ('pant_size', models.CharField(max_length=2)),
                ('pant_sex', models.CharField(max_length=5)),
                ('pant_bland', models.CharField(max_length=30)),
                ('pant_stock', models.CharField(max_length=3)),
                ('pant_image', models.ImageField(upload_to='images/')),
            ],
        ),
        migrations.CreateModel(
            name='Shirts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shirt_id', models.CharField(max_length=10)),
                ('shirt_name', models.CharField(max_length=20)),
                ('shirt_price', models.CharField(max_length=10)),
                ('shirt_size', models.CharField(max_length=2)),
                ('shirt_sex', models.CharField(max_length=5)),
                ('shirt_bland', models.CharField(max_length=30)),
                ('shirt_stock', models.CharField(max_length=3)),
                ('shirt_image', models.ImageField(upload_to='images/')),
            ],
        ),
        migrations.CreateModel(
            name='Shoes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shoe_id', models.CharField(max_length=10)),
                ('shoe_name', models.CharField(max_length=20)),
                ('shoe_price', models.CharField(max_length=10)),
                ('shoe_size', models.CharField(max_length=2)),
                ('shoe_sex', models.CharField(max_length=5)),
                ('shoe_bland', models.CharField(max_length=30)),
                ('shoe_stock', models.CharField(max_length=3)),
                ('shoe_image', models.ImageField(upload_to='images/')),
            ],
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ec.cart')),
                ('jackets', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ec.jackets')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('age', models.IntegerField(null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
